Data structure --> Arrangement of Data in efficient way

increasing size oof array --> first (int *A = new intr[10])
                          --> second ( A = new int[20] )
            TEMPLATE CLASSES

           1  VECTOR -- > Dynamic Sizing: This is its main advantage. You don't need to specify its size when you create it. You can just keep adding elements, and the vector will manage its own memory.
           push_back(): Adds an element to the end.
           pop_back(): Removes the last element.



           2 LIST - SINGLE LINK LIST, DOUBLE LINK LIST

           3 DEQUE - INSERTION OF ELEMENTS FROM BOTH SIDES 

           4 PRIORITY DEQUEUE --> special type of queue where each element has a "priority" associated with it. Instead of processing elements in the order they were added (like a regular "first-in, first-out" queue), a priority queue processes elements in order of their priority.
           Elements with higher priority are served before elements with lower priority.

           5 STACK --> LIFO (LAST IN FIRST OUT)

           6 SET -- > every element is unique


